Given an array, we have found the number of occurrences of each element in the array.

Example 1:
Input: arr[] = {10,5,10,15,10,5};
Output: 
   10  3
	 5   2
   15  1
Explanation: 
        10 occurs 3 times in the array
	      5 occurs 2 times in the array
        15 occurs 1 time in the array
Example2: 
Input: arr[] = {2,2,3,4,4,2};
Output: 2  3
	3  1
  4  2
Explanation: 
       2 occurs 3 times in the array
	     3 occurs 1 time in the array
       4 occurs 2 time in the array
       
                                        Brute Force Approach
               
 #include <bits/stdc++.h>
using namespace std;


void countFreq(int arr[], int n){
    vector<bool> visited(n,false);
    
    for(int i=0; i<n; i++){
        
        //Skipped this element if proccessed
        if(visited[i]==true)
            continue;
        
        //count frequency
        int count =1;
        
        for(int j=i+1; j<n; j++){
            if(arr[i]==arr[j]){
                visited[j]=true;
                count++;
            }
        }
        cout<<arr[i]<<"â†’"<<count<<endl;
    }
}

int main()
{
    
    
    int arr[] ={10,10,5,3,5,1};
    int n = sizeof(arr) / sizeof(arr[0]);
    countFreq(arr , n);
    
    return 0;
}



                               Using Map
                               
    #include <bits/stdc++.h>
using namespace std;


void countFreq(int arr[], int n){
    unordered_map<int , int>map;
    for(int i=0; i<n; i++){
        map[arr[i]]++;
    }
    
    // Traverse through map and print frequencies
    for(auto t:map){
        cout<<t.first<<" "<<t.second<<endl;
    }
    
}



int main()
{
    
    
    int arr[] ={10,10,5,3,1,1};
    int n = sizeof(arr) / sizeof(arr[0]);
    countFreq(arr , n);
    
    return 0;
}

       
